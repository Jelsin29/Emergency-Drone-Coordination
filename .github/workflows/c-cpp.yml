name: Emergency Drone Coordination CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libsdl2-dev \
            libsdl2-ttf-dev \
            libjson-c-dev \
            valgrind \
            doxygen \
            graphviz

      - name: Setup Build Environment
        run: |
          export CC=${{ matrix.compiler }}
          echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
          if [ "${{ matrix.build_type }}" = "Release" ]; then
            echo "CFLAGS=-O2 -DNDEBUG" >> $GITHUB_ENV
          else
            echo "CFLAGS=-g -O0" >> $GITHUB_ENV
          fi

      - name: Build All Components
        run: |
          echo "Building with $CC compiler in ${{ matrix.build_type }} mode"
          make clean
          make all

      - name: Run Unit Tests
        run: |
          echo "Running list tests..."
          make test_list

          echo "Running throughput tests..."
          make test_throughput

      - name: Run Integration Tests
        run: |
          echo "Testing multi-drone functionality..."
          timeout 30s make run_multi_drone || true

          echo "Testing client-server communication..."
          # Start server in background
          ./drone_simulator &
          SERVER_PID=$!
          sleep 2

          # Test client connection
          timeout 10s ./drone_client &
          CLIENT_PID=$!
          sleep 5

          # Cleanup
          kill $CLIENT_PID $SERVER_PID 2>/dev/null || true
          wait 2>/dev/null || true

      - name: Memory Leak Testing (Debug builds only)
        if: matrix.build_type == 'Debug'
        run: |
          echo "Running Valgrind memory leak tests..."
          make valgrind_list || echo "Memory issues detected in list test"
          make valgrind_throughput || echo "Memory issues detected in throughput test"

      - name: Static Analysis
        if: matrix.compiler == 'gcc'
        run: |
          echo "Running static analysis..."
          # Check for common issues
          gcc -Wall -Wextra -Wpedantic -fsyntax-only *.c

          # Check for potential security issues
          grep -r "sprintf\|strcpy\|strcat\|gets" *.c || echo "No unsafe functions found"

      - name: Generate Documentation
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        run: |
          echo "Generating Doxygen documentation..."
          doxygen Doxyfile

          # Check if documentation was generated successfully
          if [ -d "docs/html" ]; then
            echo "Documentation generated successfully"
          else
            echo "Documentation generation failed"
            exit 1
          fi

      - name: Upload Documentation Artifacts
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/html/
          retention-days: 30

      - name: Upload Build Artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.compiler }}
          path: |
            drone_simulator
            drone_client
            tests/listtest
            tests/sdltest
            tests/multi_drone_test
            tests/server_throughput_test
          retention-days: 7

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Analysis Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck clang-format

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            *.c headers/*.h 2> cppcheck-report.xml || true

          # Show results
          cppcheck --enable=all --inconclusive \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            *.c headers/*.h

      # - name: Check Code Formatting
      #   run: |
      #     echo "Checking code formatting..."
      #     clang-format --style=file --dry-run --Werror *.c headers/*.h || {
      #       echo "Code formatting issues found. Run 'clang-format -i *.c headers/*.h' to fix."
      #       exit 1
      #     }

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: code-analysis
          path: cppcheck-report.xml
          retention-days: 30

  cross-platform-test:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsdl2-dev \
            libsdl2-ttf-dev \
            libjson-c-dev

      # - name: Install Dependencies (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     brew update
      #     brew install sdl2 sdl2_ttf json-c

      - name: Build Project
        run: |
          make clean
          make all

      - name: Test Basic Functionality
        run: |
          # Test that executables were built successfully
          ./tests/listtest
          echo "Cross-platform build successful on ${{ matrix.os }}"

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsdl2-dev \
            libsdl2-ttf-dev \
            libjson-c-dev \
            time

      - name: Build Release Version
        run: |
          CFLAGS="-O2 -DNDEBUG" make clean all

      - name: Run Performance Benchmarks
        run: |
          echo "Running performance tests..."

          # Test list operations performance
          time ./tests/listtest

          # Test server throughput
          timeout 60s ./tests/server_throughput_test || true

          # Test multi-drone scalability
          echo "Testing with multiple drones..."
          timeout 30s ./tests/multi_drone_test || true

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            *.csv
            *.json
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Security Scan
        run: |
          echo "Scanning for security vulnerabilities..."

          # Check for hardcoded secrets or sensitive data
          grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git || echo "No hardcoded secrets found"

          # Check for unsafe function usage
          echo "Checking for unsafe functions..."
          grep -r "strcpy\|strcat\|sprintf\|gets\|scanf" *.c || echo "No obviously unsafe functions found"

          # Check file permissions
          find . -type f -perm /111 -name "*.c" -o -name "*.h" | head -10 || echo "No executable source files found"

  docker-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Test Environment
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04

          RUN apt-get update && apt-get install -y \
              build-essential \
              libsdl2-dev \
              libsdl2-ttf-dev \
              libjson-c-dev \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          COPY . .

          RUN make clean && make all

          CMD ["./tests/listtest"]
          EOF

      - name: Build and Test in Docker
        run: |
          docker build -t drone-coordination-test .
          docker run --rm drone-coordination-test
